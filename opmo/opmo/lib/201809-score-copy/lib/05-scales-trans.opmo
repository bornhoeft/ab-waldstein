;;;---------------------------------------------------------
;;; AB88
;;; Copyright © 2018 Achim Bornhoeft
;;;---------------------------------------------------------

(load (merge-pathnames "functions.lisp" *load-truename*))
(load (merge-pathnames "global.opmo" *load-truename*))

;;;---------------------------------------------------------
;;; Initialisation
;;;---------------------------------------------------------

(setf size 8)
(setf bars (gen-repeat size '(4/4)))
(setf pause (length-span bars '(-w)))

(setf piano1-1-rh pause piano1-1-lh pause piano1-2-rh pause piano1-2-lh pause 
      piano1-3-rh pause piano1-3-lh pause piano2-1-rh pause piano2-1-lh pause
      piano2-2-rh pause piano2-2-lh pause piano2-3-rh pause piano2-3-lh pause)

;;;---------------------------------------------------------
;;; Parameters
;;;---------------------------------------------------------

#|
;; loaded from global.opmo
(defparameter all-pitches
  (list pitches-piano1-1 pitches-piano1-2 pitches-piano1-3
        pitches-piano2-1 pitches-piano2-2 pitches-piano2-3))
|# 

(defparameter sel-pitches (list pitches-piano1-2 pitches-piano1-3
                                pitches-piano2-2 pitches-piano2-3))

(defparameter start-lis '(2 1 2 1 2 1 2 1 2))
(defparameter end-lis '(1 2 2 2 2 2 2 2 2)) 
                      
(defparameter pitch0 
  (midi-to-pitch 
    (append
     (loop
       for k in (gen-morph 16 start-lis end-lis :seed 123)
       collect (integer-transpose 7 (dx-x k (first pitches-piano1-2))))
     (loop repeat 16
       for i from 1
       collect (integer-transpose 7 (dx-x (gen-rotate (mod i 10) end-lis) 
                                          (first pitches-piano1-2)))))))

(defparameter velocity0
  (flatten (loop repeat (length pitch0) collect (gen-dynamic '(9 1) '(pp p)))))

(defparameter duration0 (loop repeat (length (flatten pitch0)) collect 1/32))
(defparameter half-dur (gen-repeat 160 1/32))

(defparameter pitch1
  (midi-to-pitch
   (flatten
    (append 
     (loop
       for k in (gen-morph 13 start-lis end-lis :seed 123)
       collect (integer-transpose 7 (dx-x k (first pitches-piano1-3))))
     (loop repeat 17
       for i from 1
       collect (integer-transpose 7 (dx-x (gen-rotate (mod i 10) end-lis) 
                                          (first pitches-piano1-3))))))))

(defparameter reps1 (gen-transition 3 1 10 0.95 :rounded t))
(defparameter divider1 (gen-transition 6 8 10 0.8 :rounded t))
(defparameter duration1 (append (loop for i in reps1
                          for j in divider1
                          append
                           (gen-repeat (* i j) (* 1/4 (/ 1 j))))
                                half-dur))
(defparameter pitch2
  (midi-to-pitch
   (flatten
    (append 
     (loop
       for k in (gen-morph 13 start-lis end-lis :seed 123)
       collect (integer-transpose 7 (dx-x k (first pitches-piano2-2))))
     (loop repeat 18
       for i from 1
       collect (integer-transpose 7 (dx-x (gen-rotate (mod i 10) end-lis) 
                                          (first pitches-piano2-2))))))))

(defparameter reps2 (gen-transition 3 1 10 0.95 :rounded t))
(defparameter divider2 (gen-transition 7 8 10 1.7 :rounded t))
(defparameter duration2 (append (loop for i in reps2
                          for j in divider2
                          append
                           (gen-repeat (* i j) (* 1/4 (/ 1 j))))
                                half-dur))
                  
(defparameter pitch3
  (midi-to-pitch
   (flatten
    (append 
     (loop
       for k in (gen-morph 13 start-lis end-lis :seed 123)
       collect (integer-transpose 7 (dx-x k (first pitches-piano2-3))))
     (loop repeat 16
       for i from 1
       collect (integer-transpose 7 (dx-x (gen-rotate (mod i 10) end-lis) 
                                          (first pitches-piano2-3))))))))

(defparameter reps3 (gen-transition 3 1 10 1 :rounded t))
(defparameter divider3 (gen-transition 5 8 10 1 :rounded t))
(defparameter duration3 (append (loop for i in reps3
                          for j in divider3
                          append
                           (gen-repeat (* i j) (* 1/4 (/ 1 j))))
                                half-dur))

(defparameter pitch4 
  (midi-to-pitch 
   (flatten  
     (loop repeat 16
       for i from 1
       collect (integer-transpose 7 (dx-x (gen-rotate (mod i 10) end-lis) 
                                          (first pitches-piano2-1)))))))

(defparameter duration4 (append (gen-repeat 160 -1/32) (gen-repeat 160 1/32)))
                   
(setf piano1-2-rh (make-omn :pitch (replace-map '((eb5 ds5)) pitch0) 
                            :length duration0 
                            :velocity velocity0)
      piano1-3-rh (make-omn :pitch pitch1 
                            :length duration1 
                            :velocity '(mp))
      piano2-1-rh (make-omn :pitch pitch4 
                            :length duration4 
                            :velocity '(p))
      piano2-2-rh (make-omn :pitch (replace-map ' ((bb3 as3)) pitch2) 
                            :length duration2 
                            :velocity '(p))
      piano2-3-rh (make-omn :pitch pitch3 
                            :length duration3 
                            :velocity '(mf)))

;;;---------------------------------------------------------
;;; Score and Layout
;;;---------------------------------------------------------

(def-score xxx
           (:title "AB88"
                   :composer "Achim Bornhoeft"
                   :copyright "Copyright © 2018"
                   :key-signature 'chromatic
                   :time-signature '((1 1 1 1) 4)
                   :tempo 80
                   :layout 
                   (list
                    (bracket-group
                     (brace-group 
                      (treble-layout 'piano1-1-rh) 
                      (treble-layout 'piano1-1-lh) :name "Piano 1.1" :abbr "Pno 1.1")
                     (brace-group
                      (treble-layout 'piano1-2-rh) 
                      (treble-layout 'piano1-2-lh) :name "Piano 1.2" :abbr "Pno 1.2")
                     (brace-group
                      (bass-layout 'piano1-3-rh) 
                      (bass-layout 'piano1-3-lh) :name "Piano 1.3" :abbr "Pno 1.3"))
                    (bracket-group
                     (brace-group
                      (treble-layout 'piano2-1-rh)
                      (treble-layout 'piano2-1-lh) :name "Piano 2.1" :abbr "Pno 2.1")
                     (brace-group
                      (treble-layout 'piano2-2-rh) 
                      (bass-layout 'piano2-2-lh) :name "Piano 2.2" :abbr "Pno 2.2")
                     (brace-group
                      (bass-layout 'piano2-3-rh)
                      (bass-layout'piano2-3-lh) :name "Piano 2.3" :abbr "Pno 2.3"))))	
  
  ;;; Piano I
  
  (piano1-1-rh :omn piano1-1-rh :channel 1 :pan 32)  
  (piano1-1-lh :omn piano1-1-lh :channel 2 :pan 32)
  
  (piano1-2-rh :omn piano1-2-rh :channel 3 :pan 32)
  (piano1-2-lh :omn piano1-2-lh :channel 4 :pan 32)
  
  (piano1-3-rh :omn piano1-3-rh :channel 5 :pan 32)
  (piano1-3-lh :omn piano1-3-lh :channel 6 :pan 32)
  
  ;;; Piano II
  
  (piano2-1-rh :omn piano2-1-rh :channel 7 :pan 96)
  (piano2-1-lh :omn piano2-1-lh :channel 8 :pan 96)
  
  (piano2-2-rh :omn piano2-2-rh :channel 9 :pan 96)
  (piano2-2-lh :omn piano2-2-lh :channel 11 :pan 96)
  
  (piano2-3-rh :omn piano2-3-rh :channel 12 :pan 96)
  (piano2-3-lh :omn piano2-3-lh :channel 13 :pan 96))

(display-musicxml 'xxx)