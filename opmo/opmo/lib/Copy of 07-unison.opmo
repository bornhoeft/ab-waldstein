;;;---------------------------------------------------------
;;; AB88
;;; Copyright Â© 2018 Achim Bornhoeft
;;;---------------------------------------------------------

(load (merge-pathnames "functions.lisp" *load-truename*))
(load (merge-pathnames "global.opmo" *load-truename*))

;;;---------------------------------------------------------
;;; Tests
;;;---------------------------------------------------------

(defun list-permute (lis start)
(loop repeat (length lis)
               for i from start
               collect (nth (mod i (length lis)) lis)))
;; (list-permute '(1 2 3 4 5) 1)

(setf 4voices
(list
 '((1) (2) (3) (4))
'((5) (6) (7) (8))
'((9) (10) (11) (12))
'((13) (14) (15) (16))))

(gen-unison 4voices :unison '(1 2 1 1))


;;;---------------------------------------------------------
;;; Initialisation
;;;---------------------------------------------------------

(setf size 8)
(setf bars (gen-repeat size '(4/4)))
(setf pause (length-span bars '(-q)))

(setf 
 ;; piano1-1-rh pause
 piano1-1-lh pause
 ;; piano1-2-rh pause
 piano1-2-lh pause
 ;; piano1-3-rh pause
 piano1-3-lh pause
 piano2-1-rh pause
 ;; piano2-1-lh pause
 piano2-2-rh pause
 ;; piano2-2-lh pause
 piano2-3-rh pause
 ;; piano2-3-lh pause
)

;;;---------------------------------------------------------
;;; Parameters
;;;---------------------------------------------------------

(setf chord (pitch-to-midi '(gs4 f4 e4 d4 cs4 b3)))

(defparameter repeats 32)

(setf rnd-sets 
      (matrix-transpose
      (gen-eval repeats
      '(rnd-unique 4 chord) :seed 123)
      ))

(defparameter unisons
  (flatten 
   (gen-weight 6 '(((4 4 4 4 4 4 4 3 2 1) 3) ((4 4 4 4 4 4 4 4 3 2 1) 2)) 
               :seed 37)))

(defparameter pitches 
      (midi-to-pitch
      (gen-unison rnd-sets        
                  :unison unisons)))

(setf pno-chords
      (respell (flatten (chordize (matrix-transpose pitches)))))

(defun same (lis yes no)
  (loop for i in lis
    for j in (cdr lis)
    collect (equal i j) into reslis
    finally (return 
             (if (member nil reslis) no yes))))

;; (same '(2 2 2) 'gliss '-)

;; make an accent when unison
(defparameter accents
  (loop for i in
  (matrix-transpose pitches) collect
    (same i 'marc '-))) ; calls same function

(setf mat 
      (make-omn
       :pitch pitches
       :length '(1/16)
       :articulation accents
       :velocity '(ppp)
       :span :pitch))

(setf sets (assign-variable 'mat mat))

(setf mat-pno
      (make-omn
       :pitch (respell pno-chords)
       :length '(1/16)
       :velocity '(ppp)
       :span :pitch))

(setf mat-solo
      (make-omn
       :pitch '(a4)
       :length (gen-loop repeats 1/16)
       :velocity (gen-dynamic '(16 16) '(pp mf) :end 'pp)))
       
(def-score unison
           (:key-signature 'chromatic
                           :time-signature '(4 4)
                           :tempo 60)
  
  (inst1
   :omn mat0
   :sound 'gm :program 0)
  
  (inst2
   :omn mat1
   :sound 'gm :program 0)
  
  (inst3
   :omn mat2
   :sound 'gm :program 0)
  
  (inst4
   :omn mat3
   :sound 'gm :program 0)

  (inst5
   :omn mat-pno
   :sound 'gm :program 0)

  (inst6
   :omn mat-solo
   :sound 'gm :program 0))

(display-musicxml 'unison)