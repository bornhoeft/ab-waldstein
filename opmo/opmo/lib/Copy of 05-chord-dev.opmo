;;;---------------------------------------------------------
;;; AB88
;;; Copyright © 2018 Achim Bornhoeft
;;;---------------------------------------------------------

(load (merge-pathnames "functions.lisp" *load-truename*))
(load (merge-pathnames "global.opmo" *load-truename*))

;;;---------------------------------------------------------
;;; Initialisation
;;;---------------------------------------------------------

(setf size 8)
(setf bars (gen-repeat size '(4/4)))
(setf pause (length-span bars '(-w)))

(setf piano1-1-rh pause piano1-1-lh pause piano1-2-rh pause piano1-2-lh pause 
      piano1-3-rh pause piano1-3-lh pause piano2-1-rh pause piano2-1-lh pause
      piano2-2-rh pause piano2-2-lh pause piano2-3-rh pause piano2-3-lh pause)

;;;---------------------------------------------------------
;;; Parameters
;;;---------------------------------------------------------

;;; Pitches

;; (pattern-map '((1 0) 2) (gen-binary-euclidean 1 14 8 8)) => (2 1 2 2 2 1 2 2)
(defparameter intervals-left '(-2 -1 -2 -2))
(defparameter intervals-right '(2 1 2 2))

;;; number of chords in transition

(defparameter notes 21)

#|
;; ambitus-hands: ((105 98) (98 91) (77 70) (70 63) (49 42) (42 35) (91 84) (84 77) (63 56) (56 49) (35 28) (28 21))
(defparameter start-pitches 
  (let ((lah (- (length ambitus-hands) 1)))
    (loop for i from 0 to lah by 2
      for j from 1 to lah by 2
      collect (first (nth i ambitus-hands))
      collect (first (last (nth j ambitus-hands))))))
|#

;;; pitches for the right hands
;;; start chord (1 note) and end chord (5 notes) for all right hands
  
(defparameter start-end-chord-rh
  (loop for i in ambitus-hands
    for j from 0
    for li = (first (last i))
    for end-chord = (dx-x intervals-right li)
    if (evenp j)
    collect (list (gen-repeat (length end-chord) li) end-chord)))

;;; chord transition for all right hands

(setf chords-rh
(loop for i in start-end-chord-rh
  for st = (first i)
  for nd = (second i)
  collect 
           (chord-pitch-unique 
            (chordize-list
             (midi-to-pitch
              (remove-duplicates 
              ;;; different curve values
              (gen-transition st nd notes 1 :chords t :rounded t)))))))

;;; pitches for the left hands
;;; start chord (1 note) and end chord (5 notes) for all left hands

(defparameter start-end-chord-lh
  (loop for i in ambitus-hands
    for j from 0
    for li = (first i)
    for end-chord = (dx-x intervals-left li)
    if (oddp j)
    collect (list (gen-repeat (length end-chord) li) end-chord)))

;;; chord transition for all left hands

(setf chords-lh
(loop for i in start-end-chord-lh
  for st = (first i)
  for nd = (second i)
  collect (respell 
           (chord-pitch-unique 
            (chordize-list
             (midi-to-pitch
              (remove-duplicates
              ;;; different curve values
             (gen-transition st nd notes 1 :chords t :rounded t))))))))

;;; durations for all right hands

(defun durations (trans notedur)
  (loop for i in trans
    for quantres = (quant (* -1 (- i notedur)) (list notedur))
    collect notedur into reslis
    when (not (zerop quantres))
    collect quantres into reslis
    end
    finally (return (append reslis (list notedur)))))

(defparameter transitions-rh
                  (list
                   (gen-transition 1/4 16/4 20 1)
                   (gen-transition 1/4 12/4 20 1.2)
                   (gen-transition 1/4 12/4 20 1.2)
                   (gen-transition 1/4 12/4 20 1.2)
                   (gen-transition 1/4 12/4 20 1.2)
                   (gen-transition 1/4 12/4 20 1.2)))

;;; EVENTUELL ZUSAMMENFASSEN MIT LINKER HAND, SONST IST LENGTH-ALIGN FÜR LINKE
;;; UND RECHTE HAND UNTERSCHIEDLICH
(defparameter durations-rh
  (length-align
  (loop for i in transitions-rh collect (durations i 1/16))
     ;;; length align ranges all lists to the same overall duration by adding
   ;;; the necessary amount of rests (r) at the end (e)
  :type 'r :position 'e))

;;; durations for all left hands

(defparameter transitions-lh
                  (list
                   (gen-transition 1/4 12/4 20 1)
                   (gen-transition 1/4 12/4 20 1.2)
                   (gen-transition 1/4 12/4 20 1.2)
                   (gen-transition 1/4 12/4 20 1.2)
                   (gen-transition 1/4 12/4 20 1.2)
                   (gen-transition 1/4 12/4 20 1.2)))

(defparameter durations-lh
  (length-align
  (loop for i in transitions-lh collect (durations i 1/16))
  :type 'r :position 'e))

;;;---------------------------------------------------------
;;; Parts
;;;---------------------------------------------------------

(setf voices-rh
       (gen-retrograde
        ;;; by reversing the length 
        (make-omn
         :pitch chords-rh
         :length durations-rh
         :velocity '(p))
        :type :length))

(setf sets-rh (set-assignment 'voice-rh voices-rh))

(setf voices-lh
      (gen-retrograde
       (make-omn
        :pitch chords-lh
        :length durations-lh
        :velocity '(p))
       :type :length))

(setf sets-lh (set-assignment 'voice-lh voices-lh))

(setf piano1-1-rh voice-rh0 piano1-2-rh voice-rh1 piano1-3-rh voice-rh2
      piano2-1-rh voice-rh3 piano2-2-rh voice-rh4 piano2-3-rh voice-rh5)


(setf piano1-1-lh voice-lh0 piano1-2-lh voice-lh1 piano1-3-lh voice-lh2
      piano2-1-lh voice-lh3 piano2-2-lh voice-lh4 piano2-3-lh voice-lh5)

;;;---------------------------------------------------------
;;; Score and Layout
;;;---------------------------------------------------------

(def-score chord-deviation
           (:title "AB88"
                   :composer "Achim Bornhoeft"
                   :copyright "Copyright © 2018"
                   :key-signature 'chromatic
                   :time-signature '((1 1 1 1) 4)
                   :tempo 80
                   :layout 
                   (list
                    (bracket-group
                     (brace-group 
                      (treble-layout 'piano1-1-rh) 
                      (treble-layout 'piano1-1-lh) :name "Piano 1.1" :abbr "Pno 1.1")
                     (brace-group
                      (treble-layout 'piano1-2-rh) 
                      (treble-layout 'piano1-2-lh) :name "Piano 1.2" :abbr "Pno 1.2")
                     (brace-group
                      (bass-layout 'piano1-3-rh) 
                      (bass-layout 'piano1-3-lh) :name "Piano 1.3" :abbr "Pno 1.3"))
                    (bracket-group
                     (brace-group
                      (treble-layout 'piano2-1-rh)
                      (treble-layout 'piano2-1-lh) :name "Piano 2.1" :abbr "Pno 2.1")
                     (brace-group
                      (treble-layout 'piano2-2-rh) 
                      (bass-layout 'piano2-2-lh) :name "Piano 2.2" :abbr "Pno 2.2")
                     (brace-group
                      (bass-layout 'piano2-3-rh)
                      (bass-layout'piano2-3-lh) :name "Piano 2.3" :abbr "Pno 2.3"))))	
  
  ;;; Piano I
  
  (piano1-1-rh :omn piano1-1-rh :channel 1 :pan 32)  
  (piano1-1-lh :omn piano1-1-lh :channel 2 :pan 32)
  
  (piano1-2-rh :omn piano1-2-rh :channel 3 :pan 32)
  (piano1-2-lh :omn piano1-2-lh :channel 4 :pan 32)
  
  (piano1-3-rh :omn piano1-3-rh :channel 5 :pan 32)
  (piano1-3-lh :omn piano1-3-lh :channel 6 :pan 32)
  
  ;;; Piano II
  
  (piano2-1-rh :omn piano2-1-rh :channel 7 :pan 96)
  (piano2-1-lh :omn piano2-1-lh :channel 8 :pan 96)
  
  (piano2-2-rh :omn piano2-2-rh :channel 9 :pan 96)
  (piano2-2-lh :omn piano2-2-lh :channel 11 :pan 96)
  
  (piano2-3-rh :omn piano2-3-rh :channel 12 :pan 96)
  (piano2-3-lh :omn piano2-3-lh :channel 13 :pan 96))

(display-musicxml 'chord-deviation)
(display-midi 'chord-deviation  )

#|
Damit alle gleich enden, müsen die Dauern von hinten nach vorne berechnet und dann der Verlauf umgekehrt werden:
(setf omn-fragment  '(e c4 mp d4 q e4 mf e f4 pp g4 s a4 ff b4 -e))
(gen-retrograde omn-fragment)

(defparameter trans1 (gen-transition 1/4 12/4 40 1))

(defparameter durations1 
  (loop for i in trans1
    with notedur = 1/16
    for quantres = (quant (* -1 (- i notedur)) '(1/16))
    collect notedur into reslis
    when (not (zerop quantres))
    collect quantres into reslis
    end
    finally (return (append reslis (list notedur)))))


(defparameter trans2 (gen-transition 1/4 12/4 39 1.2))

(defparameter durations2 
  (loop for i in trans2
    with notedur = 1/16
    for quantres = (quant (* -1 (- i notedur)) '(1/16))
    collect notedur into reslis
    when (not (zerop quantres))
    collect quantres into reslis
    end
    finally (return (append reslis (list notedur)))))

(set-assignment 'duration (length-align (list durations1 durations2) :type 'r :position 'e))

(setf piano1-1-rh
(gen-retrograde (make-omn
 :length duration0
 :pitch '(c4))))


(setf piano1-1-lh
(gen-retrograde (make-omn
 :length duration1
 :pitch '(c4))))
|#



